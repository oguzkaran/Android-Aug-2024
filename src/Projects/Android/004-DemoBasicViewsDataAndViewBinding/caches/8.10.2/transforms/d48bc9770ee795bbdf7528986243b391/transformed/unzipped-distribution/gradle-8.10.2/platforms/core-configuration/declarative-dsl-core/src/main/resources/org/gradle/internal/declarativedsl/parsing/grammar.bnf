/*
 * Copyright 2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{
  tokens=[
    SEMI=';'
    COMA=','
    DOT='.'
    EQ='='
    LP='('
    RP=')'
    LB='{'
    RB='}'
    USC='_'

    space='regexp:\s+'
    comment='regexp://.*|/\*[^/*]*\*/'
    number='regexp:\d+(\.\d*)?'
    id='regexp:\p{Alpha}\w*'
    string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
  ]
}

root ::= statements

statement ::= (assignment | expression)
statements ::= (statement semis?)*

assignment ::= directlyAssignableExpression EQ expression {pin=2}
expression ::= postfixUnaryExpression

semis ::= SEMI+

directlyAssignableExpression ::=
    (postfixUnaryExpression navigationSuffix*) |          // navigationSuffix changed to optional due to greedy matching
    simpleIdentifier |
    parenthesizedDirectlyAssignableExpression

parenthesizedDirectlyAssignableExpression ::= LP directlyAssignableExpression RP

postfixUnaryExpression ::= primaryExpression postfixUnarySuffix*

postfixUnarySuffix ::= callSuffix | navigationSuffix

callSuffix ::= (valueArguments? annotatedLambda) | valueArguments

annotatedLambda ::= LB statements RB {pin=1}

valueArguments ::= LP (valueArgument (COMA valueArgument)* COMA?)? RP {pin=2}
valueArgument ::= (simpleIdentifier EQ)? expression

parenthesizedExpression ::= LP expression RP

navigationSuffix ::= DOT simpleIdentifier {pin=1}

primaryExpression ::= parenthesizedExpression | literalConstant | simpleIdentifier | stringLiteral
simpleIdentifier ::= id                                      // TODO: needs refining
stringLiteral ::= string                                     // TODO: needs refining
literalConstant ::= "null" | booleanLiteral | number         // TODO: needs refining
booleanLiteral ::= "true" | "false"
